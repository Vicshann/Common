
# NOTE: Os creates some calls to functioons like memcpy
-O0

# Produce debugging information for use by GDB. This means to use the most expressive format available
#  (DWARF, stabs, or the native format if neither of those are supported), including GDB extensions if at all possible.
#-ggdb
#-ggdb2
# Produce debugging information in the operating system’s native format (stabs, COFF, XCOFF, or DWARF). GDB can work with this debugging information.
# -g tells the compiler to store symbol table information in the executable
-g3
# Produce debugging information in DWARF format (if that is supported). The value of version may be either 2, 3, 4 or 5; the default version for most targets is 4.
-gdwarf-4
# ???
#Og
# clang needs -g option to emit debug information along with -gsplit-dwarf option
# Not everything is moved to a separate file with 'gsplit-dwarf'
# For debugging with lldb it is possible to move all debug sections to a separate PE file:
#    llvm-objcopy --only-keep-debug appname.exe appname.dbg
#    llvm-objcopy --strip-all appname.exe
#    llvm-objcopy --add-gnu-debuglink=appname.dbg appname.exe
#-gsplit-dwarf
#-fstandalone-debug

-Weverything

#-mllvm -debug-pass=Structure
#-debug-pass
#-mllvm -disable-llvm-optzns
#-foptimization-record-file=C:/Opt.txt
#-fPIC -shared -Wl,-shared// For DLL?
#clang -O2 -mllvm -disable-llvm-optzns -emit-llvm -c mysource.c -o mysource.llvm.bc

#--- PREPROCESSOR
-D_DEBUG

# --------------- LINKER CONFIGURATION ---------------------------------

# No effect! Debug tag and source file names are still kept
# Overrides -s option and other garbage returns
#-Wl,-strip-debug
# Same as -s option of the compiler
#-Wl,--strip-all


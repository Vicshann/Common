
# --------------- COMPILER CONFIGURATION ---------------------------------
-v
-x c++
-std=c++23
#-std=gnu++2b

#-fuse-ld=ld
-fuse-ld=lld
# Adding this makes the module relocatable.
# It gets rid of linker version string but adds a bunch of reloc sections
#-r
# Remove all symbol table and relocation information from the executable
# Strips all garbage like source file names and function names
#-s

#-fno-vectorize
#-fno-slp-vectorize
#-fno-unroll-loops

-dead-strip
# Enables all bad things with EP disappearance and orphaned functions if there is a function with __attribute__((used))
# May disable PIC mode for some reason
# !Completely disables PIC code generation on Arm32 if '-Wl,--no-pie'!
# NOTE: X32 LTO build is broken with O3
# Makes all '__aeabi_*' (ExternC)functions invisible to the linker. Why?
#-flto
# Will this be cause of dynamic symbols table creation?
# Supposed to disable GOT creation
-fPIE
#-fPIC
# Disable PLT and lazy binding while making external calls
# Can this get rid of GOT?
-fno-plt
-fno-rtti
-nostdlib
-nostdlib++
-nostdlibinc
-nostartfiles
#-nobuiltininc
-nostdinc
-nostdinc++
# No need for __cxa_guard_acquire and __cxa_guard_release if a function contains stativ variables
-fno-threadsafe-statics
-fno-stack-protector
# ('-fno-builtin') Same as '-mkernel'? A hint that the standard library may not exist (functions with standard names may do something else)
# For now it is causing misalignmeng BUG (An it enforces NEON on ARM (With wrong alignment))
# What exactly it is affecting?
# A hint that the standard library may not exist
# Without this the compiler may use some builtins like memcpy and may "forget" to inline them
-ffreestanding
# ??? Same?
-fno-builtin
# Looks like this fixes the alignment issue  # What about keping everything properly aligned for perfomance reasons?
# Causes calls to memcpy!!!
#-mno-unaligned-access
# indicates that the compiler should not assume that unaligned memory references are handled by the system
# Same as no-unaligned-access?  # Just a workaround, as a hardware misaligned access support
# Causes calls to memcpy!!!
-mstrict-align
# Does nothing! Still requires external memcpy which is never inlined!
#-mllvm --disable-memcpy-idiom
# Not accepted
#-mllvm -mattr=-neon
-fno-asynchronous-unwind-tables
-fno-unwind-tables
-fno-exceptions
-ffast-math
#-foptimize-sibling-calls
# ????
#-fno-ident
# Unknown
#-no-define-common
# Disable export of every symbol
# Will not affect extern "C"
# Not working for ARM (Looks like it is MACH-O only)? Had to use -s
-fvisibility=hidden
# Generate code for the tiny code model. The program and its statically defined symbols must be within 1MB of each other. Programs can be statically or dynamically linked.
#-mcmodel=tiny
# tail call optimization can help to make the code nondecompilable (Should be enabled by default starting from O2)
-foptimize-sibling-calls
-mbranch-protection=none

# Generate code which uses only the general-purpose registers.
#-mgeneral-regs-only
#-mpic-data-is-text-relative    // Not implemented, and -msingle-pic-base too
#-mslow-flash-data      // Unimplemented, could be useful for obfuscation

-Wno-c++98-compat
-Wno-c++98-compat-pedantic
-Wno-unused-function
#Without this Clang will SEGFAULT (-target x86_64-apple-darwin)
-Wno-old-style-cast
-Wno-unneeded-internal-declaration
-Wno-zero-length-array
-Wno-c99-extensions
-Wno-vla-extension
-Wno-c++20-compat
-Wno-reserved-identifier
-Wno-missing-prototypes
# calling syscalls causing it
-Wno-cast-qual
-Wno-char-subscripts
-Wno-unsafe-buffer-usage
-Wno-implicit-fallthrough
-Wno-gnu-anonymous-struct
-Wno-gnu-include-next
-Wno-nested-anon-types
-Wno-unused-template
-Wno-date-time
-Wno-alloca
-Wno-psabi
# Useful for debugging of system struct porting
-Wno-padded
# Useful for debugging of unaligned memory access
-Wno-cast-align

# These are too annoying. And fixing them all over the place just make the code much less readable
-Wno-sign-conversion
-Wno-implicit-int-conversion
-Wno-shorten-64-to-32
-Wno-sign-compare

# These are useful for final cleaning only. And most are falsely reported if used in logging only
-Wno-unused-parameter
-Wno-unused-variable
-Wno-unused-but-set-variable
-Wno-switch

# This complicates usage of flag groups (Bad design or not it is used in Windows API frequently)
-Wno-deprecated-enum-enum-conversion


# Generates a separate ELF section for each (external linkage) function in the source file
-ffunction-sections
# Line wrapping breaks _DATE_ format (Actual macro value, not just console output) (Loses a space: 'Jul 1 2023' instead of 'Jul  1 2023'. See %e in std::strftime manual)
-fmessage-length=0
#-shared
# Add all symbols, even unused ones to dynamic symbol table
#-rodynamic
# Disable lazy loading completely:
# -fPIC -no-pl
# Linker: -z now -z retro
# Do not write compiler version string to object files (Works with Clang too?)
#-fno-ident
# ??? Otherwise the compiler can assume that for example memcpy() does exactly what it is supposed to and could be replaced with an inlined equivalent
#-no-builtin
#-disable-simplify-libcalls
#-fpack-struct=16
#--help-hidden

# Current dir of these scrips is the project`s root
#-I ./COMPILER/include/
#-I ./FRAMEWORK/Platforms/
#-I ./COMMON/FRAMEWORK/Platforms/


# --------------- LINKER CONFIGURATION ---------------------------------
#-Xlinker -e___ASysMain

#-mno-stack-arg-probe 
#-Xlinker --stack=0x100000,0x100000

# Must be a real symbol name or resulting binary may become zero in size
# And must be in root namespace, declared as 'extern "C"'
-Wl, -eAppEntryPoint

# Remove unused sections. Like those with unused external linkage functions (-ffunction-sections) (Keeps .comment)
-Wl,-gc-sections

# Useful for debigging a linkage problems (The directory must exist or linking will fail)
# Folder path must exist
#-Wl,-Map,FILES/output.map

#-Xlinker -dT COMPILE/Format.ld
#-Wl,-T,COMPILE/Format.ld

# No effect ; GNU linker mode only on ELF only
#-Wl,--no-export-dynamic
# This will allow all dynsym sections to be removed (config->hasDynSymTab: false)
# Linker uses PIE flag mostly for PLT thunks which is not required anyway
# What about generated code?
# Looks like this disables PIC mode completely(At least on Arm32) when LTO mode is used
#-Wl,--no-pie
# Then what meaning of '--format=binary' which makes the linker to lose entry point?
#-Wl,--oformat=binary
# LLD tries to parse it as something else
# Current dir is project dir

# No default linkeer script IN LLD
#-Wl,--verbose
# ???
#-Wl,-N
# Useful
#-Wl,--print-map
# Another way of passing flags to linker ?
# Why by default was 64k? ; In case some ARM may be configured to use 64K pages, especially AArch64? ; Kernel will not load the image otherwise
# https://reviews.llvm.org/D77330
# What about PIC and page-relative data access(ADRP)?  ; https://stackoverflow.com/questions/41906688/what-are-the-semantics-of-adrp-and-adrl-instructions-in-arm-assembly
#-z max-page-size=0x1000